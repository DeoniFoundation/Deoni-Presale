// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/crowdsale/Crowdsale.sol";


/**
 * @title CappedCrowdsale
 * @dev Crowdsale with a limit for total contributions.
 */
abstract contract CappedCrowdsale is Crowdsale {
  using SafeMath for uint256;

  // uint256 public _cap;

  constructor(uint256 cap_) {
    require(cap_ > 0);
    _cap = cap_;
  }

  /**
   * @dev Checks whether the cap has been reached.
   * @return Whether the cap was reached
   */
//   function capReached() public view virtual returns (bool) {
//     return _weiRaised >= _cap;
//   }

  /**
   * @dev Extend parent behavior requiring purchase to respect the funding cap.
   * @param _beneficiary Token purchaser
   * @param _weiAmount Amount of wei contributed
   */
  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal override view {
    super._preValidatePurchase(_beneficiary, _weiAmount);
    require(weiRaised().add(_weiAmount) <= _cap);
  }

}